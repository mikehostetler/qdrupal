<?php
// $Id$

require_once('qdrupal.link.inc');

/**
 * Implementation of hook_init()
 */
function qdrupal_init() {
  // shouldn't this be in hook_load or hook_view, such that its only run
  // on appropriate nodes
  drupal_add_css(drupal_get_path('module', 'qdrupal') .'/qdrupal.css');
}

/**
 * Implementation of hook_node_info().
 */
function qdrupal_node_info() {
  return array(
    'qdrupal_link' => array(
      'name' => t('QDrupal Form Link'),
      'module' => 'qdrupal_link',
      'description' => t('A QDrupal Link is a node definition that links a Drupal node to a Qcubed QForm file.  A Qcubed QForm file must currently exist on the filesystem.  This is useful when you want to make existing Qcubed applications appear inside a drupal page'),
      'title_label' => t('QDrupal Link'),
      'body_label' => t('Create an QDrupal Link'),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function qdrupal_perm() {
  return array(
    'administer qdrupal',
    'access qdrupal'
  );
}

/**
 * Implementation of hook_theme()
 */
function qdrupal_theme() {
	return array(
		'application_summary' => array(
			'arguments' => array('application' => NULL)
		),
		'application_detail' => array(
			'arguments' => array('app' => NULL)
		)
	);
}

/**
 * Implementation of hook_menu().
 */
function qdrupal_menu() {
	$items = array();
	$items['qdrupal-link/qforms'] = array(
		'page callback' => 'qdrupal_link_qforms',
		'access arguments' => array('administer_qdrupal'),
		'type' => MENU_CALLBACK,
    );
	$items['admin/build/qdrupal'] = array(
		'title' => 'QDrupal Applications',
		'page callback' => 'qdrupal_admin_overview',
		'access arguments' => array('administer qdrupal'),
		'description' => t('Create and manage QDrupal applications, profiles, and nodes.'),
		'file' => 'qdrupal.admin.inc'
	);
	$items['admin/build/qdrupal/list'] = array(
		'title' => 'List',
		'type' => MENU_DEFAULT_LOCAL_TASK
	);
	$items['admin/build/qdrupal/add'] = array(
		'title' => 'Add Application',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('qdrupal_application_form'),
		'access arguments' => array('administer qdrupal'),
		'file' => 'qdrupal.admin.inc',
		'type' => MENU_LOCAL_TASK,
		'weight' => 1
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid'] = array(
		'title' => 'View',
		'page callback' => 'qdrupal_application_overview',
		'page arguments' => array(3),
		'access arguments' => array('administer qdrupal'),
		'file' => 'qdrupal.admin.inc',
		'weight' => -1
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/view'] = array(
		'title' => 'View',
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/edit'] = array(
		'title' => 'Edit',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('qdrupal_application_form',3),
		'access arguments' => array('administer qdrupal'),
		'type' => MENU_LOCAL_TASK,
		'file' => 'qdrupal.admin.inc',
		'weight' => 1
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/delete'] = array(
		'title' => 'Edit',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('qdrupal_application_delete_confirm',3),
		'access arguments' => array('administer qdrupal'),
		'file' => 'qdrupal.admin.inc',
	);

	$items['admin/build/qdrupal/%qdrupal_app_valid/profile'] = array(
		'title' => 'Profiles',
		'page callback' => 'qdrupal_profile_overview',
		'page arguments' => array(3),
		'access arguments' => array('administer qdrupal'),
		'file' => 'qdrupal.profile.inc',
		'type' => MENU_LOCAL_TASK,
		'weight' => 4
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/profile/view'] = array(
		'title' => 'List',
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/profile/add'] = array(
		'title' => 'Add Profile',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('qdrupal_profile_form',3),
		'access arguments' => array('administer qdrupal'),
		'type' => MENU_LOCAL_TASK,
		'file' => 'qdrupal.profile.inc',
		'weight' => 4
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/profile/%qdrupal_profile_valid/edit'] = array(
		'title' => 'Edit',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('qdrupal_profile_form',3,5),
		'access arguments' => array('administer qdrupal'),
		'file' => 'qdrupal.profile.inc',
		'weight' => 4
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/profile/%qdrupal_profile_valid/delete'] = array(
		'title' => '',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('qdrupal_profile_delete_confirm',3,5),
		'access arguments' => array('administer qdrupal'),
		'type' => MENU_CALLBACK,
		'file' => 'qdrupal.profile.inc',
		'weight' => 6
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/codegen'] = array(
		'title' => 'Codegen',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('qdrupal_codegen',3),
		'access arguments' => array('administer qdrupal'),
		'type' => MENU_LOCAL_TASK,
		'file' => 'qdrupal.codegen.inc',
		'weight' => 6
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/drafts'] = array(
		'title' => 'Drafts',
		'page callback' => 'qdrupal_drafts_overview',
		'page arguments' => array(3),
		'access arguments' => array('administer qdrupal'),
		'type' => MENU_LOCAL_TASK,
		'file' => 'qdrupal.drafts.inc',
		'weight' => 8
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/drafts/%'] = array(
		'title' => 'Drafts',
		'page callback' => 'qdrupal_draft_qform',
		'page arguments' => array(3,5),
		'access arguments' => array('administer qdrupal'),
		'file' => 'qdrupal.drafts.inc',
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/drafts/%/list'] = array(
		'title' => 'List',
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/drafts/%/edit'] = array(
		'title' => 'Drafts',
		'page callback' => 'qdrupal_draft_qform',
		'page arguments' => array(3,5,6),
		'access arguments' => array('administer qdrupal'),
		'file' => 'qdrupal.drafts.inc',
	);
  /*
	$items['admin/build/qdrupal/import'] = array(
		'title' => 'Import Application',
		'page callback' => 'qdrupal_application_import',
		'access arguments' => array('administer qdrupal'),
		'type' => MENU_LOCAL_TASK,
	);
	$items['admin/build/qdrupal/%qdrupal_app_valid/export'] = array(
		'title' => 'Export',
		'page callback' => 'qdrupal_application_export',
		'page arguments' => array(2),
		'access arguments' => array('administer qdrupal'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 8
	);
  */
  return $items;
}

/**
 * Helper function for hook_menu to validate a QDrupal application node 
 */
function qdrupal_app_valid_load($aid) {
  if($app = qdrupal_application_load($aid)) {
    return $app;
  }
	return FALSE;
}

/**
 * Helper function for hook_menu to validate a QDrupal Application Profile
 */
function qdrupal_profile_valid_load($name) {
  $aid = arg(3);
  if($profile = qdrupal_profile_load($aid,$name)) {
    if (sizeof($profile) == 1) {
      $profile = array_shift($profile);
    }
    return $profile;
  }
	return FALSE;
}

/**
 * QDrupal Applications API.
 */
function qdrupal_application_create($aid,$title,$description,$is_module) {
  require_once('qdrupal.admin.inc');
  db_query("INSERT INTO {qdrupal_application} (aid,title,description,is_module) 
  VALUES ('%s', '%s', '%s', '%s')", $aid,$title,$description,$is_module);
  qdrupal_application_update_disk(qdrupal_application_load($aid));
}

function qdrupal_application_update($aid,$title,$description,$is_module) {
  db_query("UPDATE {qdrupal_application} SET title = '%s',  
  description = '%s', is_module = %d WHERE aid = '%s'", 
  $title, $description, $is_module, $aid);
}

function qdrupal_application_delete($app) {
  watchdog('qdrupal', 'Deleted application %app', array('%app' => $form_state['values']['app']->title));
  db_query('DELETE FROM {qdrupal_application} WHERE aid = \'%s\'', $app->aid);
  db_query('DELETE FROM {qdrupal_profile} WHERE aid = \'%s\'', $app->aid);
  db_query('DELETE FROM {qdrupal_link} WHERE aid = \'%s\'', $app->aid);		
}

function qdrupal_application_load($aid) {
  $app = db_fetch_object(db_query("SELECT aid, title, description, is_module FROM {qdrupal_application} WHERE aid = '%s'", $aid));
  if($app) return $app;
  return FALSE;
}

function qdrupal_application_path($app) {
  if( $app->is_module ) {
    $app_path = drupal_get_path('module',$app->aid);
  } else {
    $main_path = file_create_path('qdrupal');
    file_check_directory($main_path, FILE_CREATE_DIRECTORY);
    $app_path = file_create_path($main_path . DIRECTORY_SEPARATOR . $app->aid);
    file_check_directory($app_path, FILE_CREATE_DIRECTORY);
  }

  return $app_path;
}

function qdrupal_application_disk_path($app) {
  return $_SERVER['DOCUMENT_ROOT'].'/'.qdrupal_application_path($app);
}

/**
 * QDrupal Application Profiles API.
 */
function qdrupal_profile_load($aid, $name = NULL) {
  if (is_null($name)) {
	  $result = db_query('SELECT aid, name, setting FROM {qdrupal_profile} WHERE aid = "%s"',array($aid));
  }
  else {
	  $result = db_query('SELECT aid, name, setting FROM {qdrupal_profile} WHERE aid = "%s" AND name = "%s"', array($aid, $name));
  }

  $profiles = array();
	while ($data = db_fetch_object($result)) {
		$data->setting = unserialize($data->setting);
		$profiles[$data->name] = $data;
	}

  if (sizeof($profiles) == 0) {
    return FALSE;
  }

  return $profiles;
}

function qdrupal_profile_save($aid, $name, $values) {
  if(qdrupal_profile_load($aid,$name)) {
    db_query('UPDATE {qdrupal_profile} SET aid = "%s", name = "%s", setting = "%s" WHERE aid = "%s" AND name = "%s"',$aid,$name,serialize($values),$aid,$name);
    drupal_set_message(t('Updated profile %profile.', array('%profile' => $name)));
    watchdog('qdrupal', 'Updated profile %profile for application %app', array('%profile' => $name, '%app' => $aid));
  }
  else {
    db_query('INSERT INTO {qdrupal_profile} VALUES ("%s", "%s", "%s")',$aid,$name,serialize($values));
    drupal_set_message(t('Added profile %profile.', array('%profile' => $name)));
    watchdog('qdrupal', 'Added profile %profile for application %app', array('%profile' => $name, '%app' => $aid));
  }
}

function qdrupal_profile_delete($aid,$name) {
  db_query('DELETE FROM {qdrupal_profile} WHERE aid = "%s" AND name = "%s"', $aid, $name);
}

/*
 * QDrupal general API
 */
function qdrupal_prepend(&$app) {
  require_once('qdrupal.bootstrap.inc');
  _qdrupal_prepend($app);
}

/*
 * Function to run a qform. This function can be invoked in two manners:
 * 1) with only two arguments, in which case the specified file is assumed
 *    to have the 'run qform' code in it.
 * 2) with four arguments, in which case the form class name and template
 *    must also be specified so the form can be invoked externally. It is 
 *    assumed that the form does not have this information in it.
 */
function qdrupal_run_qform($app,$form_path,$form_template_path = NULL,$form_name = NULL) {
  if(!file_exists($form_path)) drupal_not_found($draft_file);

  qdrupal_prepend($app);

  if( $form_template_path == NULL && $form_name == NULL ) {
    ob_start();
    require_once($form_path);
    return ob_get_clean();
  }  

  require_once($form_path);

  try {
  if(!class_exists($form_name)) throw new Exception("Class $form_name does not exist!");
  ob_start();
  call_user_func(array($form_name,'Run'),$form_name,$form_template_path);
  $content = ob_get_clean();
  } catch (Exception $e) {
    ob_start();
    QcodoHandleException($e,FALSE);
    $content = '<div style="width: 100%; overflow: auto; border: 1px solid #CDCDCD;">';
    $content .= ob_get_clean();
    $content .= '</div>';
  }

  _qdrupal_restore_drupal_error_handler();

  return $content;
}

function qdrupal_verify_qform($form_path) {
  firep($form_path,"form-path");
  return TRUE;
}
