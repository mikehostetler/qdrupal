<?php
// $Id$

require_once("qdrupal_bootstrap.php");
require_once("qdrupal_codegen.php");
require_once("qdrupal_application.php");
require_once("qdrupal_node.php");
require_once("qdrupal_link.php");
require_once("qdrupal_settings.php");
require_once("qdrupal_util.php");

/**
 * Implementation of hook_node_info().
 */
function qdrupal_node_info() {
  return array(
    'qdrupal_application' => array(
      'name' => t('QDrupal Application'),
      'module' => 'qdrupal_application',
      'description' => t("A QDrupal application is a collection of Qcodo forms with common settings.  Each application has its own database and codegen settings."),
      'title_label' => t('QDrupal Application Name'),
      'body_label' => t('Create an Application'),
    ),
    'qdrupal_node' => array(
      'name' => t('QDrupal Node'),
      'module' => 'qdrupal_node',
      'description' => t('A qcodo node is a definition of qforms and templating functions for a given application.  Qcodo nodes give you access to the entire library of qcodo functions including the object layer from your database, encapsulated in a drupal node'),
      'title_label' => t('QDrupal Node'),
      'body_label' => t('Create a Qcodo application node'),
    ),
    'qdrupal_link' => array(
      'name' => t('QDrupal Form Link'),
      'module' => 'qdrupal_link',
      'description' => t('A QDrupal Link is a node definition that links a Drupal node to a Qcodo QForm file.  A Qcodo QForm file must currently exist on the filesystem.  This is useful when you want to make existing Qcodo applications appear inside a drupal page'),
      'title_label' => t('QDrupal Link'),
      'body_label' => t('Create an QDrupal Link'),
    ),
  );
}
 
/**
 * Implementation of hook_perm().
 */
function qdrupal_perm() {
  return array(
		'create qdrupal applications',
    'administer qdrupal applications',
    'access qdrupal applications',
    'create qdrupal links',
    'access qdrupal links',
    'edit own qdrupal links',
    'create qdrupal nodes',
    'access qdrupal nodes',
    'edit own qdrupal nodes'
  );
}

/**
 * Implementation of hook_init()
 */
function qdrupal_init() {
	drupal_add_css(drupal_get_path('module', 'qdrupal') .'/qdrupal.css');
}

/**
 * Implementation of hook_menu().
 */
function qdrupal_menu() {
  $access_application_all = user_access('access qdrupal applications');
  $access_application_own = user_access('access own qdrupal application');
  $access_application_admin = user_access('administer qdrupal applications');
  $access_application = $access_application_all || $access_application_own || $access_application_admin;

  $admin_applications = user_access('administer qdrupal applications');
  $access_link_create = node_access('create', 'qdrupal_link');
  $access_node_create = node_access('create', 'qdrupal_node');

  $items = array();
	$items['qdrupal/applications'] = array(
		'title' => 'QDrupal Applications',
		'page callback' => 'qdrupal_application_page_overview',
		'access callback' => $access_application,
		'type' => MENU_NORMAL_ITEM
	);

	$items['node/%qdrupal_app/codegen'] = array(
		'title' => 'Codegen',
		'page callback' => 'qdrupal_application_codegen',
		'page arguments' => array(1),
		'access callback' => $admin_applications,
		'type' => MENU_LOCAL_TASK,
		'weight' => 6
	);

	$items['node/%qdrupal_app/databases'] = array(
		'title' => 'Databases',
		'page callback' => 'qdrupal_application_administer',
		'page arguments' => array(1),
		'access callback' => $admin_applications,
		'type' => MENU_LOCAL_TASK,
		'weight' => 4
	);

	$items['node/%qdrupal_app/databases/%'] = array(
		'title' => 'Databases',
		'page callback' => 'qdrupal_application_administer',
		'page arguments' => array(1,3),
		'access callback' => $admin_applications,
		'type' => MENU_LOCAL_TASK,
		'weight' => 4
	);

	$items['node/%qdrupal_app/drafts'] = array(
		'title' => 'Drafts',
		'page callback' => 'qdrupal_application_drafts',
		'page arguments' => array(1),
		'access callback' => $admin_applications,
		'type' => MENU_LOCAL_TASK,
		'weight' => 8
	);

  return $items;
}

/**
 * Helper function for hook_menu to validate a Qdrupal application node 
 */
function qdrupal_app_load($nid) {
	if (!is_numeric($nid)) {
		return FALSE;
	}
	$app = node_load($nid);
	if ($app->type != "qdrupal_application") {
		return FALSE;
	}
	return $app;
}

/**
 * Implementation of hook_theme()
 */
function qdrupal_theme() {
	return array(
		'application_summary' => array(
				'arguments' => array('application' => NULL)
			)
		);
}

/**
 * List all qdrupal nodes for a given application node
 */
function qdrupal_get_nodes($nid) {
  $result = db_query('SELECT n.*, q.* FROM {node} n,{qdrupal_node} q where n.nid = q.nid and q.application_id = %d ORDER BY n.changed DESC', $nid);
  $output = '';
  $node = node_load($nid);
	$rows = array();
  if ($result) {
    $header = array(t('Node'), t('Operations'));
    while ($n = db_fetch_object($result)) {
      $rows[] = array(array('data' => l($n->title,'node/'.$n->nid ),'valign' => 'top'),
        array('data' => l(t('edit'), 'node/'.$n->nid.'/edit/') . ' '. l(t('delete'), 'node/'.$n->nid.'/delete/'), 'valign' => 'top')
      );
    }
    $output .= theme('table', $header, $rows);
    $output .= t('<p><a href="!create-qdrupal-node">Create new QDrupal node</a></p>', array('!create-qdrupal-node' => url("node/add/qdrupal-node/$node->shortname")));
  }
  else {
		// fixme this function should direct to the qdrupal-node add page and should PREPOPULATE application select box
		$output .= t('No QDrupal nodes found. Click here to <a href="!create-qdrupal-nodes">create a new qdrupal node for this application</a>.', array('!create-qdrupal-nodes' => url("node/add/qdrupal-node/$node->shortname")));
  }
  return $output;
}

/**
 * Load all qdrupal links for a given application node
 */
function qdrupal_get_links($nid) {
  $result = db_query('SELECT n.*, q.*  FROM {node} n,{qdrupal_link} q
    where n.nid = q.nid and q.application_id = %d ORDER BY n.changed DESC', $nid);
  $output = '';
  $node = node_load($nid);
	$rows = array();
  if ($result) {
  $header = array(t('Link'), t('Operations'));
    while ($l = db_fetch_object($result)) {
      $rows[] = array(array('data' => l($l->title,'node/'.$l->nid ),'valign' => 'top'),
          array('data' => l(t('edit'), 'node/'.$l->nid.'/edit/') . ' '. l(t('delete'), 'node/'.$l->nid.'/delete/'), 'valign' => 'top')
          );
    }
    $output .= theme('table', $header, $rows);
    $output .= t('<p><a href="!create-qdrupal-link">Create new QDrupal link</a></p>', array('!create-qdrupal-link' => url("node/add/qdrupal-link/$node->shortname")));
  }
  else {
		// fixme this function should direct to the qdrupal-node add page and should PREPOPULATE application select box
		$output .= t('No QDrupal links found. Click here to <a href="!create-qdrupal-link">create a new qdrupal link for this application</a>.', array('!create-qdrupal-link' => url("node/add/qdrupal-link/$node->shortname")));
  }
  return $output;
}

/**
 * Run a qdrupal page.  This is a simplistic front controller
 */
function qdrupal_front() {
  global $args;
  $args = func_get_args();

  foreach($args as $k => $item) {
    if(preg_match('/[^\/,-_;a-z0-9*]/i', $args[$k]))
      unset($args[$k]);
    elseif(trim($args[$k]) == "")
      unset($args[$k]);
  }
  // Throw on a Default
  if(sizeof($args) == 0) {
    $args[] = 'index';
  }
  // Backards compat?
  if(sizeof($args) == 1) {
    // FIXME do qdrupal_font backwards compat here?
  }
  $nid=$args[0];
  $node = node_load($nid);
  qdrupal_bootstrap($node);
  $formDrafts = __DOCROOT__ . __FORM_DRAFTS__ . DIRECTORY_SEPARATOR;
  $customForms = __QDrupal_PAGES__. DIRECTORY_SEPARATOR;

  // Recursively search for a file to display
  $pageFound = false;
  $type="";
  // Construct the file path
  // FIXME this is now a more simplistic front controller, may need enhancement
  $pageStr = $args[1];
  if(!stristr($pageStr,'.php')) {
    $pageStr .= ".php";
  }
  if(file_exists($customForms . $pageStr)) {
    // We've got a hit! 
    $page = $customForms . $pageStr;
    $pageFound = true;
    $type= "pages";
    
  }
  elseif(file_exists($formDrafts . $pageStr)) {
    // We've got a hit!
    $page = $formDrafts . $pageStr;
    $pageFound = true;
    $type="Form Drafts";
  }
  if(!$pageFound) {
    drupal_not_found($pageStr);
    return;
  }
  $new_breadcrumb[] = l("Home","");
  $path = $config['NAME'];

  $newpath = $path . "/node/".$node->nid;
  $newarg = $node->title;
  $new_breadcrumb[] = l($newarg,$newpath);
  
  // FIXME This should be a case statement on type
  $newpath = $path ."/node/".$node->nid. "/formdrafts";
  $newarg = "Form Drafts";
  $new_breadcrumb[] = l($newarg,$newpath);
  
  $newarg = ucwords(str_replace(array('-','_','/','\\',',',';','.php'),' ',$args[1]));
  $newpath = $path ."/qdrupal/".$node->nid. "/".$args[1];
  $new_breadcrumb[] = l($newarg,$newpath);
      
  drupal_set_breadcrumb($new_breadcrumb);
  drupal_set_title(" ");

  ob_start();
  // FIXME need to work on qdrupal profiling options
  if(variable_get("qdrupal_enable_profiling",false))
    QApplication::$Database[1]->EnableProfiling();
  require_once($page);
  if(variable_get("qdrupal_enable_profiling",false))
    QApplication::$Database[1]->OutputProfiling();
  $content = ob_get_clean();
  return $content;
}

/**
 * Function that runs a QDrupal Draft
 */ 
function qdrupal_application_drafts($node) {
  $args = func_get_args();
	array_shift($args); // Pull the node off the top
	
  foreach($args as $k => $item) {
    if(preg_match('/[^\/,-_;a-z0-9*]/i', $args[$k])) {
      unset($args[$k]);
    }
    elseif(trim($args[$k]) == "") {
      unset($args[$k]);
    }
  }

  // if there are no additional arguments, display form draft index
  if(sizeof($args) == 0) {
    qdrupal_prepend($node);
    drupal_set_title($node->title . " Drafts");
		drupal_set_breadcrumb(array(
				l(t('Home'),NULL),
				l(t($node->title),'node/'.$node->nid),
				l(t('Drafts'),'node/'.$node->nid.'/drafts')
		));

    // Iterate through the files in this "form_drafts" folder, looking for files that end in _edit.php or _list.php
    $draft_suffixes = array('_edit.php', '_list.php', '_combo.php');
    $drafts = array();
    $drafts_dir = opendir(__DOCROOT__ . __FORM_DRAFTS__);
    while ($filename = readdir($drafts_dir)) {
      if (($filename != '.') && ($filename != '..')) {
        $draft_found = false;
        foreach ($draft_suffixes as $strSuffix) {
          if ((!$draft_found) && (substr($filename, strlen($filename) - strlen($strSuffix)) == $strSuffix)) {
            $filename = substr($filename, 0, strlen($filename) - strlen($strSuffix));
            $draft_found = true;
          }
        }
        if ($draft_found)
          $drafts[$filename] = true;
      }
    }

    // Sort the list of objects
    ksort($drafts);
    $out = <<<OUT
      <table>
        <thead><th>Objects</th><th>Operations</th></thead>
        <tbody>
OUT;

    $dir = $node->nid;
    $class = 'even';
    foreach ($drafts as $draft => $val) {
      ($class == 'odd') ? $class = 'even' : $class = 'odd';
      $out .= sprintf('<tr class="%s"><td><b>%s</b><td><a href="%s/%s/list">%s</a> &nbsp;|&nbsp; <a href="%s/%s/edit">%s</a></td></tr>', $class,
         $draft,request_uri(),$draft, QApplication::Translate('View List'), request_uri(),$draft, QApplication::Translate('Create New'));
    }
    $out .= <<<OUT
      </tbody>
    </table>
OUT;
    print $out;
  } else {
    qdrupal_prepend($node);
    drupal_set_title(ucfirst($args[0]) . " " . ucfirst($args[1]) . " Draft");
		drupal_set_breadcrumb(array(
				l(t('Home'),NULL),
				l(t($node->title),'node/'.$node->nid),
				l(t('Drafts'),'node/'.$node->nid.'/drafts'),
				l(ucfirst($args[0]),'node/'.$node->nid.'/drafts/'.$args[0].'/'.$args[1]),
				l(ucfirst($args[1]),'node/'.$node->nid.'/drafts/'.$args[0].'/'.$args[1])
		));

    $drafts = QDRUPAL_APPLICATION_PATH . DS . basename(__FORM_DRAFTS__) . DS;
    $page = $drafts . $args[0] . '_' . $args[1] . '.php';

    if(!file_exists($page)) {
      drupal_not_found($page);
      return $page . print_r($args);
    }

    require_once($page);
  }
  
  _qdrupal_restore_drupal_error_handler();
  return ob_get_clean();
}

