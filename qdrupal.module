<?php
// $Id$

require_once("qdrupal_application.php");
require_once("qdrupal_node.php");
require_once("qdrupal_link.php");
require_once("qdrupal_settings.php");
require_once("qdrupal_util.php");

/**
 * Implementation of hook_node_info().
 */
function qdrupal_node_info() {
  return array(
    'qdrupal_application' => array(
      'name' => t('QDrupal Application'),
      'module' => 'qdrupal_application',
      'description' => t("A QDrupal application is a collection of qcodo pages with common settings.  Each application has its own database and codegen settings"),
      'title_label' => t('QDrupal app'),
      'body_label' => t('Create an application'),
    ),
    'qdrupal_node' => array(
      'name' => t('QDrupal Node'),
      'module' => 'qdrupal_node',
      'description' => t('A qcodo node is a definition of qforms and templating functions for a given application.  Qcodo nodes give you access to the entire library of qcodo functions including the object layer from your database, encapsulated in a drupal node'),
      'title_label' => t('QDrupal node'),
      'body_label' => t('Create a Qcodo application node'),
    ),
    'qdrupal_link' => array(
      'name' => t('QDrupal Form Link'),
      'module' => 'qdrupal_link',
      'description' => t('A QDrupal Link is a node definition that links a Drupal node to a Qcodo QForm file.  A Qcodo QForm file must currently exist on the filesystem.  This is useful when you want to make existing Qcodo applications appear inside a drupal page'),
      'title_label' => t('QDrupal Link'),
      'body_label' => t('Create an QDrupal Link'),
    ),
  );
}
 
/**
 * Implementation of hook_perm().
 */
function qdrupal_perm() {
  return array(
    'administer qdrupal applications',
    'maintain qdrupal applications',
    'access qdrupal applications',
    'create qdrupal links',
    'access qdrupal links',
    'edit own qdrupal links',
    'access own qdrupal links',
    'create qdrupal nodes',
    'access qdrupal nodes',
    'edit own qdrupal nodes',
    'access own qdrupal nodes'
  );
}

/**
 * Implementation of hook_menu().
 */
function qdrupal_menu($may_cache) {
  global $user;
  $access_application_all = user_access('access qdrupal applications');
  $access_application_own = user_access('access own qdrupal application');
  $access_application_admin = user_access('administer qdrupal applications');
  $access_application = $access_application_all || $access_application_own || $access_application_admin;

  $admin_applications = user_access('administer qdrupal applications');
  $access_link_create = node_access('create', 'qdrupal_link');
  $access_node_create = node_access('create', 'qdrupal_node');

  $items = array();

  if ($may_cache) {
    // todo many more qdrupal menus to add here
    // qdrupal/applications
    // qdrupal/applications/add
    // qdrupal/applications/orphans
    // admin/settings/qdrupal',
    // application/profile
    // applications/[name]/links/add
    // applications/[name]/nodes/add
    // qdrupal/applications/[name]/objects 
    // qdrupal/applications/[name]/media
  } 
  else {
    drupal_add_css(drupal_get_path('module', 'qdrupal') .'/qdrupal.css');
    // fixme the node add link below is not showing up in create content menu
    $items[] = array(
      'path' => 'node/add/qdrupal-link',
      'title' => t('QDrupal Form Link'),
      'callback' => 'qdrupal_link_pick_application_page',
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'node/add/qdrupal-application',
      'title' => t('QDrupal Application'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array('path' => 'applications',
      'title' => t('QDrupal Applications'),
      'callback' => 'qdrupal_application_page_overview',
      'access' => $access_application,
      'type' => MENU_NORMAL_ITEM
    );

    // qdrupal-link hook_form(), after the application has been selected
    if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'qdrupal-link' && arg(3)) {
      $items[] = array(
        'path' => 'node/add/qdrupal-link/'. arg(3),
        'callback' => 'node_add',
        'callback arguments' => array('qdrupal-link'),
        'access' => $access_link_create,
        'type' => MENU_CALLBACK,
      );
    }
    if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'qdrupal-node' && arg(3)) {
      $items[] = array(
        'path' => 'node/add/qdrupal-node/'. arg(3),
        'callback' => 'node_add',
        'callback arguments' => array('qdrupal-node'),
        'access' => $access_node_create,
        'type' => MENU_CALLBACK,
      );
    }
    // Menu items living under an application
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
        if( $node && $node->type == 'qdrupal_application' ) {
          $items[] = array(
            'path' => 'node/'. arg(1) .'/databases',
            'title' => t('Databases'),
            'callback' => 'qdrupal_application_administer',
            'callback arguments' => array(arg(1),arg(3)),
            'access' => $admin_applications,
            'type' => MENU_LOCAL_TASK,
            'weight' => 4
          );
          $items[] = array(
            'path' => 'node/'. arg(1) .'/codegen',
            'title' => t('Codegen'),
            'callback' => 'qdrupal_application_codegen',
            'callback arguments' => array(arg(1)),
            'access' => $admin_applications,
            'type' => MENU_LOCAL_TASK,
            'weight' => 6
          );
          $items[] = array(
            'path' => 'node/'. arg(1) .'/drafts',
            'title' => t('Drafts'),
            'callback' => 'qdrupal_application_drafts',
            'callback arguments' => array(arg(1)),
            'access' => $admin_applications,
            'type' => MENU_LOCAL_TASK,
            'weight' => 8
          );
        } 
      }
   }
  return $items;
}

/**
 * Bootstrap qcodo into drupal
 */
function qdrupal_bootstrap(&$node) {
  /**
   * Set up tons of paths
   */
  // TODO - Handle if download method is set to private
  $qdrupal_path = file_create_path('qdrupal');
  file_check_directory($qdrupal_path, FILE_CREATE_DIRECTORY);

  define('DS', DIRECTORY_SEPARATOR);
  define('PS', PATH_SEPARATOR);

  define ('__DOCROOT__', getenv('DOCUMENT_ROOT'));
  define ('__VIRTUAL_DIRECTORY__', '');
  define('QDRUPAL_ROOT',dirname(__FILE__));

  // Detect whether we're running zcodo or qcodo
  if(file_exists(QDRUPAL_ROOT . DS . 'qcodo')) {
    define('QCODO_DIST',QDRUPAL_ROOT . DS . 'qcodo');
    define ('__SUBDIRECTORY__', base_path().drupal_get_path('module','qdrupal').DS.'qcodo'.DS.'wwwroot');
  }
  elseif(file_exists(QDRUPAL_ROOT . DS . 'zcodo')) {
    define('QCODO_DIST',QDRUPAL_ROOT . DS . 'zcodo');
    define ('__SUBDIRECTORY__', base_path().drupal_get_path('module','qdrupal').DS.'zcodo'.DS.'wwwroot');
  }
  else {
    // Keep old path for reference.
    if (!isset($_REQUEST['destination'])) {
      $_REQUEST['destination'] = $_GET['q'];
    }

    $path = drupal_get_normal_path('<front>');
    if ($path && $path != $_GET['q']) {
      // Set the active item in case there are tabs to display or other dependencies on the path.
      menu_set_active_item($path);
      $return = menu_execute_active_handler($path);
    }

    if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
      drupal_set_title(t('QDrupal Fatal Error'));
      $return = t('The <a href="http://zcodo.com">Zcodo</a> or <a
        href="http://qcodo.com">Qcodo</a> libraries are not installed!
        Please read the INSTALLATION instructions for the QDrupal module
        and install the correct libraries.');
    }
    print theme('page',$return);
  }

  define('APPLICATION_NAME', $node->shortname);
  define('DRUPAL_ROOT',__DOCROOT__ . base_path());

  define('QDRUPAL_WRITABLE_PATH',DRUPAL_ROOT.$qdrupal_path);

  //define('QDRUPAL_WRITABLE_PATH',DRUPAL_ROOT.drupal_get_path('module','pocketwatch'));

  define('QCODO_DIST',QDRUPAL_ROOT . DS . 'qcodo');
  define('QCODO_DEFAULT_CODEGEN',QCODO_DIST . DS . 'wwwroot' . DS . '_devtools' . DS . 'codegen_settings.xml');
  define('QCODO_DEFAULT_CONFIGURATION',QCODO_DIST . DS . 'wwwroot' .  DS . 'includes' . DS . 'configuration_pro.inc.php');

  // load database settings
  $settings = qdrupal_settings_load($node->nid);
  $count = 1;
  if ($settings) {
    foreach ($settings as $s) {
      $connection_array = array(
        'adapter' => $s->setting['adapter'],
        'server' => $s->setting['server'],
        'port' => $s->setting['port'],
        'database' => $s->setting['dbname'],
        'username' => $s->setting['username'],
        'password' => $s->setting['password'],
        'profiling' => $s->setting['profiling']
      );
      define("DB_CONNECTION_$count", serialize($connection_array) );
      $count++;
    }
  } else {
    global $db_url;
    if (is_array($db_url)) {
      $connect_url = $db_url['default'];
    }
    else {
      $connect_url = $db_url;
    }
    $drupal_db = parse_url($connect_url);
    $db_type = substr($connect_url, 0, strpos($connect_url, '://'));
    switch($db_type) {
      case 'pgsql':
        $drupal_adapter = 'PostgreSql';
        break;
      case 'mysqli':
        $drupal_adapter = 'MySqli5';
        break;
      default:
        $drupal_adapter = 'MySql';
        break;
    }
    define('DB_CONNECTION_1', serialize(array(
      'adapter' => $drupal_adapter,
      'server' => $drupal_db['host'],
      'port' => $drupal_db['port'],
      'database' => substr($drupal_db['path'], 1),
      'username' => urldecode($drupal_db['user']),
      'password' => urldecode($drupal_db['pass']),
      'profiling' => FALSE)));
  }
  
  // FIXME need to change this to specify administer your application
  define ('ALLOW_REMOTE_ADMIN', user_access('administer qdrupal applications'));
  define ('__URL_REWRITE__', 'apache'); // TODO - Make a setting for this
  define ('__DEVTOOLS_CLI__', __DOCROOT__ . __SUBDIRECTORY__ . DS . '..' . DS . '_devtools_cli');
  define ('__INCLUDES__', __DOCROOT__ .  __SUBDIRECTORY__ . DS . 'includes');
  define ('__QCODO__', __INCLUDES__ . DS . 'qcodo');
  define ('__QCODO_CORE__', __INCLUDES__ . DS . 'qcodo' . DS . '_core');
  define ('__DATA_CLASSES__', QDRUPAL_WRITABLE_PATH . DS . APPLICATION_NAME . DS . 'data_classes');
  define ('__DATAGEN_CLASSES__', QDRUPAL_WRITABLE_PATH . DS . APPLICATION_NAME . DS . 'data_classes' . DS . 'generated');
  define ('__DATA_META_CONTROLS__', QDRUPAL_WRITABLE_PATH . DS . APPLICATION_NAME . DS . 'data_meta_controls');
  define ('__DATAGEN_META_CONTROLS__', QDRUPAL_WRITABLE_PATH . DS . APPLICATION_NAME . DS . 'data_meta_controls'. DS . 'generated');
  define ('__QDRUPAL_PAGES__', QDRUPAL_WRITABLE_PATH . DS . APPLICATION_NAME . DS . 'pages');
  define ('__QDRUPAL_NODES__', QDRUPAL_WRITABLE_PATH . DS . APPLICATION_NAME . DS . 'nodes');
  define ('__DEVTOOLS__', __SUBDIRECTORY__ . DS . '_devtools');
  define ('__FORM_DRAFTS__', base_path() . $qdrupal_path . DS . APPLICATION_NAME . DS . 'drafts');
  define ('__PANEL_DRAFTS__', base_path() . $qdrupal_path . DS . APPLICATION_NAME . DS . 'drafts' . DS . 'dashboard');

  // We don't want "Examples"
  define ('__EXAMPLES__', null);

  define ('__JS_ASSETS__', __SUBDIRECTORY__ . DS . 'assets' . DS . 'js');
  define ('__CSS_ASSETS__', __SUBDIRECTORY__ . DS . 'assets' . DS . 'css');
  define ('__IMAGE_ASSETS__', __SUBDIRECTORY__ . DS . 'assets' . DS . 'images');
  define ('__PHP_ASSETS__', __SUBDIRECTORY__ . DS . 'assets' . DS . 'php');

  // TODO - Integrate Drupal's Location into this
  if ((function_exists('date_default_timezone_set')) && (!ini_get('date.timezone')))
    date_default_timezone_set('America/Los_Angeles');

  define('ERROR_PAGE_PATH', __PHP_ASSETS__ . DS . '_core' . DS . 'error_page.php');
  define('ERROR_LOG_PATH', QDrupal_WRITABLE_PATH . DS . 'error_log');
   
  //drupal_add_css() puts a / at the beginning, so need to strip it off
  drupal_add_css(substr(__CSS_ASSETS__ . DS . "styles.css", 1));
}

/**
  * Run the QDrupal prepend.inc.php file
  */
function qdrupal_prepend(&$node) {
  if (!defined('__PREPEND_INCLUDED__')) {
    define('__PREPEND_INCLUDED__', 1);
    qdrupal_bootstrap($node);
    require(__QCODO_CORE__ . DS . 'qcodo.inc.php');

    abstract class QApplication extends QApplicationBase {
      public static function Autoload($strClassName) {
        if (!parent::Autoload($strClassName)) {
          // TODO: Run any custom autoloading functionality (if any) here...
        }
      }
    }

    if (array_key_exists('SERVER_PROTOCOL', $_SERVER)) {
      set_error_handler('qdrupal_error_handler');
      set_exception_handler('QcodoHandleException');
    }

    QApplication::Initialize();
    QApplication::$RequestUri = request_uri();
    QApplication::InitializeDatabaseConnections();

    if (isset($_SESSION)) {
      if (array_key_exists('country_code', $_SESSION))
        QApplication::$CountryCode = $_SESSION['country_code'];
      if (array_key_exists('language_code', $_SESSION))
        QApplication::$LanguageCode = $_SESSION['language_code'];
    }

    // TODO - Tie this into Drupal Localization
    if (QApplication::$LanguageCode)
      QI18n::Initialize();
    else {
      // QApplication::$CountryCode = 'us';
      // QApplication::$LanguageCode = 'en';
      // QI18n::Initialize();
    }
  }
}

/**
 * Controller for qcodo application settings.
 */
function qdrupal_application_administer($nid,$arg = NULL) {
  $edit = $_POST;
  $op = $_POST['op'];
  $op = $arg && !$op ? $arg : $op;

  $node = node_load($nid);

  switch ($op) {
    case 'add':
      // TODO - Add Correct Breadcrumbs
      $breadcrumb[] = array('path' => 'node/'.$nid, 'title' => t($node->title));
      $breadcrumb[] = array('path' => 'node/'.$nid.'/databases', 'title' => t('databases'));
      menu_set_location($breadcrumb);
      $output = qdrupal_settings_form($edit,$nid);
      break;

    case 'edit':
      drupal_set_title(t('Edit database settings'));
      $output = qdrupal_settings_form(qdrupal_settings_load($nid,urldecode(arg(4))),$nid);
      break;

    case 'delete':
      qdrupal_settings_delete($nid,urldecode(arg(4)));
      drupal_set_message(t('Deleted Settings'));
      drupal_goto('node/'.$nid.'/databases');
      break;

    case t('Create settings');
    case t('Update settings');
      if (qdrupal_settings_validate($edit,$nid)) {
        qdrupal_settings_save($edit,$nid);
        $edit['old_name'] ? drupal_set_message(t('Your qdrupal database settings have been updated.')) : drupal_set_message(t('Your qdrupal database settings have been created.'));
        drupal_goto('node/'.$nid.'/databases');
      }
      else {
        $output = qdrupal_settings_form($edit,$nid);
      }
      break;

    default:
      drupal_set_title(t('Database settings'));
      $output = qdrupal_settings_overview($nid);
  }
  return $output;
}

/**
 * Theme a compact application view/summary.
 */
function theme_application_summary($application) {
  $output = '<div class="' . $application->class . '">';
  $output .= '<h2>'. l($application->title, "node/$application->nid") .'</h2>';
  if (!empty($application->changed)) {
    $output .= '<p><small>' . t('Last changed: !interval ago', array('!interval' => format_interval(time() - $application->changed, 2))) . '</small></p>';
  }
  $output .= $application->body;
  $output .= theme('links', $application->links);
  $output .= '</div>';
  return $output;
}

/**
 * List all qdrupal nodes for a given application node
 */
function qdrupal_get_nodes($nid) {
  $result = db_query('SELECT n.*, q.* FROM {node} n,{qdrupal_node} q where n.nid = q.nid and q.application_id = %d ORDER BY n.changed DESC', $nid);
  $output = '';
  $node = node_load($nid);
  if ($result) {
    $header = array(t('Node'), t('Operations'));
    while ($n = db_fetch_object($result)) {
      $rows[] = array(array('data' => l($n->title,'node/'.$n->nid ),'valign' => 'top'),
        array('data' => l(t('edit'), 'node/'.$n->nid.'/edit/') . ' '. l(t('delete'), 'node/'.$n->nid.'/delete/'), 'valign' => 'top')
      );
    }
    $output .= theme('table', $header, $rows);
    $output .= t('<p><a href="!create-qdrupal-node">Create new QDrupal node</a></p>', array('!create-qdrupal-node' => url("node/add/qdrupal-node/$node->shortname")));
  }
  else {
  // fixme this function should direct to the qdrupal-node add page and should PREPOPULATE application select box
  $output .= t('No QDrupal nodes found. Click here to <a href="!create-qdrupal-nodes">create a new qdrupal node for this application</a>.', array('!create-qdrupal-nodes' => url("node/add/qdrupal-node/$node->shortname")));
  }
  return $output;
}

/**
 * Load all qdrupal links for a given application node
 */
function qdrupal_get_links($nid) {
  $result = db_query('SELECT n.*, q.*  FROM {node} n,{qdrupal_link} q
    where n.nid = q.nid and q.application_id = %d ORDER BY n.changed DESC', $nid);
  $output = '';
  $node=node_load($nid);
  if ($result) {
  $header = array(t('Link'), t('Operations'));
    while ($l = db_fetch_object($result)) {
      $rows[] = array(array('data' => l($l->title,'node/'.$l->nid ),'valign' => 'top'),
          array('data' => l(t('edit'), 'node/'.$l->nid.'/edit/') . ' '. l(t('delete'), 'node/'.$l->nid.'/delete/'), 'valign' => 'top')
          );
    }
    $output .= theme('table', $header, $rows);
    $output .= t('<p><a href="!create-qdrupal-link">Create new QDrupal link</a></p>', array('!create-qdrupal-link' => url("node/add/qdrupal-link/$node->shortname")));
  }
  else {
  // fixme this function should direct to the qdrupal-node add page and should PREPOPULATE application select box
  $output .= t('No QDrupal links found. Click here to <a href="!create-qdrupal-link">create a new qdrupal link for this application</a>.', array('!create-qdrupal-link' => url("node/add/qdrupal-link/$node->shortname")));
  }
  return $output;
}

/**
 * Run a qdrupal page.  This is a simplistic front controller
 */
function qdrupal_front() {
  global $args;
  $args = func_get_args();

  foreach($args as $k => $item) {
    if(preg_match('/[^\/,-_;a-z0-9*]/i', $args[$k]))
      unset($args[$k]);
    elseif(trim($args[$k]) == "")
      unset($args[$k]);
  }
  // Throw on a Default
  if(sizeof($args) == 0) {
    $args[] = 'index';
  }
  // Backards compat?
  if(sizeof($args) == 1) {
    // FIXME do qdrupal_font backwards compat here?
  }
  $nid=$args[0];
  $node = node_load($nid);
  qdrupal_bootstrap($node);
  $formDrafts = __DOCROOT__ . __FORM_DRAFTS__ . DIRECTORY_SEPARATOR;
  $customForms = __QDrupal_PAGES__. DIRECTORY_SEPARATOR;

  // Recursively search for a file to display
  $pageFound = false;
  $type="";
  // Construct the file path
  // FIXME this is now a more simplistic front controller, may need enhancement
  $pageStr = $args[1];
  if(!stristr($pageStr,'.php')) {
    $pageStr .= ".php";
  }
  if(file_exists($customForms . $pageStr)) {
    // We've got a hit! 
    $page = $customForms . $pageStr;
    $pageFound = true;
    $type= "pages";
    
  }
  elseif(file_exists($formDrafts . $pageStr)) {
    // We've got a hit!
    $page = $formDrafts . $pageStr;
    $pageFound = true;
    $type="Form Drafts";
  }
  if(!$pageFound) {
    drupal_not_found($pageStr);
    return;
  }
  $new_breadcrumb[] = l("Home","");
  $path = $config['NAME'];

  $newpath = $path . "/node/".$node->nid;
  $newarg = $node->title;
  $new_breadcrumb[] = l($newarg,$newpath);
  
  // FIXME This should be a case statement on type
  $newpath = $path ."/node/".$node->nid. "/formdrafts";
  $newarg = "Form Drafts";
  $new_breadcrumb[] = l($newarg,$newpath);
  
  $newarg = ucwords(str_replace(array('-','_','/','\\',',',';','.php'),' ',$args[1]));
  $newpath = $path ."/qdrupal/".$node->nid. "/".$args[1];
  $new_breadcrumb[] = l($newarg,$newpath);
      
  drupal_set_breadcrumb($new_breadcrumb);
  drupal_set_title(" ");

  ob_start();
  // FIXME need to work on qdrupal profiling options
  if(variable_get("qdrupal_enable_profiling",false))
    QApplication::$Database[1]->EnableProfiling();
  require_once($page);
  if(variable_get("qdrupal_enable_profiling",false))
    QApplication::$Database[1]->OutputProfiling();
  $content = ob_get_clean();
  return $content;
}

function qdrupal_tmpl_path($qform) {
  // FIXME tmpl_path needs some work
  // Update: now the function will look for either a form draft, a page, 
  // or a drupal node.  Still needs to be better tho. ;-)

  $basename = basename($qform);
  $templatename = ereg_replace(".php", ".tpl.php", $basename);
  // a 'page'
  if(file_exists( dirname($qform) . DIRECTORY_SEPARATOR  . $templatename))
    return dirname($qform) . DIRECTORY_SEPARATOR . $templatename;
}

/**
 * Function that runs the Qcodo Code Generator
 */ 
function qdrupal_application_codegen($nid) {
  $node = node_load($nid);
  drupal_set_title("$node->title -- Codegen");

  // fixme breadcrumbs are broken here
  $new_breadcrumb[] = l("Home","");
  $path = $config['NAME'];
  $newpath = $path . "/node/".$node->nid;
  $newarg = $node->title;
  $new_breadcrumb[] = l($newarg,$newpath);
  $newpath = $path ."/node/".$node->nid. "/codegen";
  $newarg = "Codegen";
  $new_breadcrumb[] = l($newarg,$newpath);
  drupal_set_breadcrumb($new_breadcrumb);
  // end breadcrumb stuff
 
  

  // Set base xml document
  $strXML = <<<XML
<?xml version="1.0" encoding="UTF-8" ?>
<codegen>
  <name application="{$node->title}"/>
  <templateEscape begin="&lt;%" end="%&gt;"/>
  <dataSources>
  </dataSources>
</codegen>
XML;

  $objXML = simplexml_load_string($strXML);

  // get codegen settings from database
  // put settings xml variable
  $settings = qdrupal_settings_load($node->nid);
  $count=1;
  if ($settings) {
    foreach ($settings as $s) {
      $database = $objXML->dataSources->addChild('database');
    $database->addAttribute('index', $count);

    $className = $database->addChild('className');
    $className->addAttribute('prefix', $s->setting['classNamePrefix']);
    $className->addAttribute('suffix', $s->setting['classNameSuffix']);

    $associatedObjectName = $database->addChild('associatedObjectName');
      $associatedObjectName->addAttribute('prefix', $s->setting['associatedObjectNamePrefix'] ? $s->setting['associatedObjectNamePrefix'] : '');
      $associatedObjectName->addAttribute('suffix', $s->setting['associatedObjectNameSuffix'] ? $s->setting['associatedObjectNameSuffix'] : '');

    $typeTableIdentifier = $database->addChild('typeTableIdentifier');
    $typeTableIdentifier ->addAttribute('suffix', $s->setting['typeTableIdentifierSuffix'] ? $s->setting['typeTableIdentifierSuffix'] : '');

    $associationTableIdentifier = $database->addChild('associationTableIdentifier');
    $associationTableIdentifier ->addAttribute('suffix', $s->setting['associationTableIdentifierSuffix'] ? $s->setting['associationTableIdentifierSuffix'] : '');

      $excludeTables = $database->addChild('excludeTables');
      $excludeTables->addAttribute('list', $s->setting['excludeTablesList'] );
      $excludeTables->addAttribute('pattern', $s->setting['excludeTablesPattern'] );

      $includeTables = $database->addChild('includeTables');
      $includeTables->addAttribute('list', $s->setting['includeTablesList'] );
      $includeTables->addAttribute('pattern', $s->setting['includeTablesPattern'] );
      $count++;
    }
  }


  $strFilename = '/codegen_settings.xml';
  $strAppPath = file_create_path('qdrupal' . DIRECTORY_SEPARATOR .  preg_replace('/\s+/', '',strip_tags($node->shortname)));
  file_check_directory($strAppPath, FILE_CREATE_DIRECTORY);

  // Output xml to filesystem
  $strXML = $objXML->asXML();
  file_save_data($strXML,$strAppPath.$strFilename,FILE_EXISTS_REPLACE);

  qdrupal_prepend($node);
  ob_start();
  require(__QCODO__ . DIRECTORY_SEPARATOR . 'codegen' . DIRECTORY_SEPARATOR . 'QCodeGen.class.php');
  QCodeGen::Run($strAppPath.$strFilename);
  ?>
  <div class="page">
    <?php if ($strErrors = QCodeGen::$RootErrors) { ?>
      <p><b>The following root errors were reported:</b></p>
      <div class="code"><xmp><?php echo ($strErrors); ?></xmp></div>
      <p></p>
    <?php } else { ?>
      <p><b>CodeGen Settings:</b></p>
      <div class="code"><xmp><?php echo (QCodeGen::GetSettingsXml()); ?></xmp></div>
      <p></p>
    <?php } ?>

    <?php foreach (QCodeGen::$CodeGenArray as $objCodeGen) { ?>
      <p><b><?php _p($objCodeGen->GetTitle()); ?></b></p>
      <div class="code"><span class="code_title"><?php _p($objCodeGen->GetReportLabel()); ?></span><br/><br/>
        <xmp><?php echo ($objCodeGen->GenerateAll()); ?></xmp>
        <?php if ($strErrors = $objCodeGen->Errors) { ?>
          <p class="code_title">The following errors were reported:</p>
          <xmp><?php echo ($objCodeGen->Errors); ?></xmp>
        <?php } ?>
      </div><p></p>
    <?php } ?>
    
    <?php foreach (QCodeGen::GenerateAggregate() as $strMessage) { ?>
      <p><b><?php _p($strMessage); ?></b></p>
    <?php } ?>
  </div>
  <?php
  qdrupal_restore_drupal_error_handler();
  return ob_get_clean();
}

/**
 * Function that runs a QDrupal Draft
 */ 
function qdrupal_application_drafts($nid) {
  $args = func_get_args();
  $node = node_load($nid);
  //ob_start();
  
  global $args;
  $args = func_get_args();
  foreach($args as $k => $item) {
    if(preg_match('/[^\/,-_;a-z0-9*]/i', $args[$k])) {
      unset($args[$k]);
    }
    elseif(trim($args[$k]) == "") {
      unset($args[$k]);
    }
  }

  // if there are no additional arguments, display form draft index
  if(sizeof($args) == 1) {
    qdrupal_prepend($node);
    drupal_set_title($node->title . " -- Drafts");
    // todo add breadcrumbs here

    // Iterate through the files in this "form_drafts" folder, looking for files that end in _edit.php or _list.php
    $draft_suffixes = array('_edit.php', '_list.php', '_combo.php');
    $drafts = array();
    $drafts_dir = opendir(__DOCROOT__ . __FORM_DRAFTS__);
    while ($filename = readdir($drafts_dir)) {
      if (($filename != '.') && ($filename != '..')) {
        $draft_found = false;
        foreach ($draft_suffixes as $strSuffix) {
          if ((!$draft_found) && (substr($filename, strlen($filename) - strlen($strSuffix)) == $strSuffix)) {
            $filename = substr($filename, 0, strlen($filename) - strlen($strSuffix));
            $draft_found = true;
          }
        }
        if ($draft_found)
          $drafts[$filename] = true;
      }
    }

    // Sort the list of objects
    ksort($drafts);
    $out = <<<OUT
      <table>
        <thead><th>Objects</th><th>Operations</th></thead>
        <tbody>
OUT;

    $dir = $node->nid;
    $class = 'even';
    foreach ($drafts as $draft => $val) {
      ($class == 'odd') ? $class = 'even' : $class = 'odd';
      $out .= sprintf('<tr class="%s"><td><b>%s</b><td><a href="%s/%s/list">%s</a> &nbsp;|&nbsp; <a href="%s/%s/edit">%s</a></td></tr>', $class,
         $draft,request_uri(),$draft, QApplication::Translate('View List'), request_uri(),$draft, QApplication::Translate('Create New'));
    }
    $out .= <<<OUT
      </tbody>
    </table>
OUT;
    print $out;
  } else {
    qdrupal_prepend($node);

    $drafts = __DOCROOT__ . __FORM_DRAFTS__ . DIRECTORY_SEPARATOR;
    //$pageStr = DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR,$args[1]);
    $page = $args[1] . '_' . $args[2] . '.php';

    if(file_exists($drafts . $page)) {
      $page = $drafts . $page;
    } else {
      drupal_not_found($page);
      return $drafts . $page . print_r($args);
    }
    // todo add breadcrumbs here
    drupal_set_title("$node->title -- Draft");
    require_once($page);
  }
  
  qdrupal_restore_drupal_error_handler();
  return ob_get_clean();
}



class QDrupalException extends Exception {
}

function qdrupal_error_handler($__exc_errno, $__exc_errstr, $__exc_errfile, $__exc_errline, $blnExit = TRUE) {
  if($__exc_errno == E_NOTICE) return;
  ob_start();
  QcodoHandleError($__exc_errno, $__exc_errstr, $__exc_errfile, $__exc_errline,$blnExit = FALSE);
  echo 'keep going';
  $strContent = ob_get_clean();
  //throw new QDrupalException($strContent);
  echo $strContent;
  exit;
}

function qdrupal_restore_drupal_error_handler() {
  set_error_handler('error_handler');
}
