<?php
// $Id$

require_once("qdrupal_bootstrap.php");
require_once("qdrupal_codegen.php");
require_once("qdrupal_application.php");
require_once("qdrupal_node.php");
require_once("qdrupal_link.php");
require_once("qdrupal_settings.php");
require_once("qdrupal_util.php");

/**
 * Implementation of hook_node_info().
 */
function qdrupal_node_info() {
  return array(
    'qdrupal_link' => array(
      'name' => t('QDrupal Form Link'),
      'module' => 'qdrupal_link',
      'description' => t('A QDrupal Link is a node definition that links a Drupal node to a Qcubed QForm file.  A Qcubed QForm file must currently exist on the filesystem.  This is useful when you want to make existing Qcubed applications appear inside a drupal page'),
      'title_label' => t('QDrupal Link'),
      'body_label' => t('Create an QDrupal Link'),
    ),
  );
}
 
/**
 * Implementation of hook_perm().
 */
function qdrupal_perm() {
  return array(
		'create qdrupal applications',
    'administer qdrupal applications',
    'access qdrupal applications',
    'create qdrupal links',
    'access qdrupal links',
    'edit own qdrupal links',
  );
}

/**
 * Implementation of hook_init()
 */
function qdrupal_init() {
	drupal_add_css(drupal_get_path('module', 'qdrupal') .'/qdrupal.css');
}

/**
 * Implementation of hook_menu().
 */
function qdrupal_menu() {
  $access_application_all = user_access('access qdrupal applications');
  $access_application_own = user_access('access own qdrupal application');
  $access_application_admin = user_access('administer qdrupal applications');
  $access_application = $access_application_all || $access_application_own || $access_application_admin;

  $admin_applications = user_access('administer qdrupal applications');
  $access_link_create = node_access('create', 'qdrupal_link');
 
  $items = array();
  // FIXME put in a regular /qdrupal link for general settings, or a admin/setting/qdrupal link
	$items['qdrupal/applications'] = array(
		'title' => 'QDrupal Applications',
		'page callback' => 'qdrupal_application_page_overview',
		'access callback' => $access_application,
		'type' => MENU_NORMAL_ITEM
	);
	$items['qdrupal/application/add'] = array(
		'title' => 'QDrupal Applications',
		'page callback' => 'qdrupal_application_create',
		'access callback' => $admin_applications,
		'type' => MENU_CALLBACK
	);
	$items['qdrupal/applications/import'] = array(
		'title' => 'Import Application',
		'page callback' => 'qdrupal_application_import',
		'access callback' => $admin_applications,
		'type' => MENU_CALLBACK,
	);
	// fixme this looks wrong
	$items['qdrupal/application/build'] = array(
		'title' => 'New Application',
		'page callback' => 'qdrupal_application_codegen',
		'page arguments' => array(1),
		'access callback' => $admin_applications,
		'type' => MENU_LOCAL_TASK,
		'weight' => 6
	);
	$items['qdrupal/applications/%'] = array(
		'title' => 'View',
		'page callback' => 'qdrupal_application_details',
		'access callback' => $admin_applications,
		'page arguments' => array(2),
		'type' => MENU_CALLBACK,
		'weight' => -1
	);
	$items['qdrupal/applications/%/view'] = array(
		'title' => 'View',
		'page callback' => 'qdrupal_application_details',
		'access callback' => $admin_applications,
		'page arguments' => array(2),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -1
	);
	$items['qdrupal/applications/%/edit'] = array(
		'title' => 'Edit',
		'page callback' => 'qdrupal_application_edit',
		'page arguments' => array(2),
		'access callback' => $admin_applications,
		'type' => MENU_LOCAL_TASK,
		'weight' => 1
	);

	$items['qdrupal/applications/%/codegen'] = array(
		'title' => 'Codegen',
		'page callback' => 'qdrupal_application_codegen',
		'page arguments' => array(2),
		'access callback' => $admin_applications,
		'type' => MENU_LOCAL_TASK,
		'weight' => 6
	);

	$items['qdrupal/applications/%/databases'] = array(
		'title' => 'Databases',
		'page callback' => 'qdrupal_settings_overview',
		'page arguments' => array(2),
		'access callback' => $admin_applications,
		'type' => MENU_LOCAL_TASK,
		'weight' => 4
	);
	$items['qdrupal/applications/%/databases/add'] = array(
		'title' => 'Add Database',
		'page callback' => 'qdrupal_settings_add',
		'page arguments' => array(2),
		'access callback' => $admin_applications,
		'type' => MENU_CALLBACK
	);

	$items['qdrupal/applications/%/databases/%/edit'] = array(
		'title' => 'Databases',
		'page callback' => 'qdrupal_settings_edit',
		'page arguments' => array(2,4),
		'access callback' => $admin_applications,
		'type' => MENU_CALLBACK,
		'weight' => 4
	);
	
	$items['qdrupal/applications/%/databases/%/delete'] = array(
		'title' => 'Databases',
		'page callback' => 'qdrupal_settings_delete_by_name',
		'page arguments' => array(2,4),
		'access callback' => $admin_applications,
		'type' => MENU_CALLBACK,
		'weight' => 4
	);

	$items['qdrupal/applications/%/drafts'] = array(
		'title' => 'Drafts',
		'page callback' => 'qdrupal_application_drafts',
		'page arguments' => array(2),
		'access callback' => $admin_applications,
		'type' => MENU_LOCAL_TASK,
		'weight' => 8
	);
	$items['qdrupal/applications/%/export'] = array(
		'title' => 'Export',
		'page callback' => 'qdrupal_application_export',
		'page arguments' => array(2),
		'access callback' => $admin_applications,
		'type' => MENU_LOCAL_TASK,
		'weight' => 8
	);
  return $items;
}


/**
 * Helper function for hook_menu to validate a Qdrupal application node 
 */
/*
function qdrupal_app_load($aid) {
	if (!is_numeric($aid)) {
		return FALSE;
	}
	$app = node_load($aid);
	if ($app->type != "qdrupal_application") {
		return FALSE;
	}
	return $app;
}
*/

/**
 * Implementation of hook_theme()
 */
function qdrupal_theme() {
	return array(
		'application_summary' => array(
				'arguments' => array('application' => NULL)
			)
		);
}


/**
 * Run a qdrupal page.  This is a simplistic front controller
 */
function qdrupal_front() {
  global $args;
  $args = func_get_args();

  foreach($args as $k => $item) {
    if(preg_match('/[^\/,-_;a-z0-9*]/i', $args[$k]))
      unset($args[$k]);
    elseif(trim($args[$k]) == "")
      unset($args[$k]);
  }
  // Throw on a Default
  if(sizeof($args) == 0) {
    $args[] = 'index';
  }
  // Backards compat?
  if(sizeof($args) == 1) {
    // FIXME do qdrupal_font backwards compat here?
  }
  $nid=$args[0];
  $node = node_load($nid);
  qdrupal_bootstrap($node);
  $formDrafts = __DOCROOT__ . __FORM_DRAFTS__ . DIRECTORY_SEPARATOR;
  $customForms = __QDrupal_PAGES__. DIRECTORY_SEPARATOR;

  // Recursively search for a file to display
  $pageFound = false;
  $type="";
  // Construct the file path
  // FIXME this is now a more simplistic front controller, may need enhancement
  $pageStr = $args[1];
  if(!stristr($pageStr,'.php')) {
    $pageStr .= ".php";
  }
  if(file_exists($customForms . $pageStr)) {
    // We've got a hit! 
    $page = $customForms . $pageStr;
    $pageFound = true;
    $type= "pages";
    
  }
  elseif(file_exists($formDrafts . $pageStr)) {
    // We've got a hit!
    $page = $formDrafts . $pageStr;
    $pageFound = true;
    $type="Form Drafts";
  }
  if(!$pageFound) {
    drupal_not_found($pageStr);
    return;
  }
  $new_breadcrumb[] = l("Home","");
  $path = $config['NAME'];

  $newpath = $path . "/node/".$node->nid;
  $newarg = $node->title;
  $new_breadcrumb[] = l($newarg,$newpath);
  
  // FIXME This should be a case statement on type
  $newpath = $path ."/node/".$node->nid. "/formdrafts";
  $newarg = "Form Drafts";
  $new_breadcrumb[] = l($newarg,$newpath);
  
  $newarg = ucwords(str_replace(array('-','_','/','\\',',',';','.php'),' ',$args[1]));
  $newpath = $path ."/qdrupal/".$node->nid. "/".$args[1];
  $new_breadcrumb[] = l($newarg,$newpath);
      
  drupal_set_breadcrumb($new_breadcrumb);
  drupal_set_title(" ");

  ob_start();
  // FIXME need to work on qdrupal profiling options
  if(variable_get("qdrupal_enable_profiling",false))
    QApplication::$Database[1]->EnableProfiling();
  require_once($page);
  if(variable_get("qdrupal_enable_profiling",false))
    QApplication::$Database[1]->OutputProfiling();
  $content = ob_get_clean();
  return $content;
}

/**
 * Function that runs a QDrupal Draft
 */ 
function qdrupal_application_drafts($shortname) {
  $args = func_get_args();
	array_shift($args); // Pull the node off the top
	
	$app = qdrupal_application_load_by_name($shortname);
	
  foreach($args as $k => $item) {
    if(preg_match('/[^\/,-_;a-z0-9*]/i', $args[$k])) {
      unset($args[$k]);
    }
    elseif(trim($args[$k]) == "") {
      unset($args[$k]);
    }
  }

  // if there are no additional arguments, display form draft index
  if(sizeof($args) == 0) {
    qdrupal_prepend($app);
    drupal_set_title($app->title . " Drafts");
    
    drupal_set_breadcrumb(array( l(t('Home'),NULL), 
                                l(t('QDrupal Applications'),'qdrupal/applications'),
                                l($app->title,'qdrupal/applications/'.$app->shortname),
                                l('Drafts','qdrupal/applications/'.$app->shortname.'/drafts')
                                ));

    // Iterate through the files in this "form_drafts" folder, looking for files that end in _edit.php or _list.php
    $draft_suffixes = array('_edit.php', '_list.php', '_combo.php');
    $drafts = array();
    $drafts_dir = opendir(__DOCROOT__ . __FORM_DRAFTS__);
    while ($filename = readdir($drafts_dir)) {
      if (($filename != '.') && ($filename != '..')) {
        $draft_found = false;
        foreach ($draft_suffixes as $strSuffix) {
          if ((!$draft_found) && (substr($filename, strlen($filename) - strlen($strSuffix)) == $strSuffix)) {
            $filename = substr($filename, 0, strlen($filename) - strlen($strSuffix));
            $draft_found = true;
          }
        }
        if ($draft_found)
          $drafts[$filename] = true;
      }
    }

    // Sort the list of objects
    ksort($drafts);
    $out = <<<OUT
      <table>
        <thead><th>Objects</th><th>Operations</th></thead>
        <tbody>
OUT;

    $dir = $node->nid;
    $class = 'even';
    foreach ($drafts as $draft => $val) {
      ($class == 'odd') ? $class = 'even' : $class = 'odd';
      $out .= sprintf('<tr class="%s"><td><b>%s</b><td><a href="%s/%s/list">%s</a> &nbsp;|&nbsp; <a href="%s/%s/edit">%s</a></td></tr>', $class,
         $draft,request_uri(),$draft, QApplication::Translate('View List'), request_uri(),$draft, QApplication::Translate('Create New'));
    }
    $out .= <<<OUT
      </tbody>
    </table>
OUT;
    print $out;
  } else {
    qdrupal_prepend($app);
    drupal_set_title(ucfirst($args[0]) . " " . ucfirst($args[1]) . " Draft");
		drupal_set_breadcrumb(array(
      l(t('Home'),NULL),
      l(t('QDrupal Applications'),'qdrupal/applications'),
      l($app->title,'qdrupal/applications/'.$app->shortname),
      l('Drafts','qdrupal/applications/'.$app->shortname.'/drafts'),
      l(ucfirst($args[0]),'qdrupal/applications/'.$app->shortname.'/drafts/'.$args[0].'/'.$args[1]),
      l(ucfirst($args[1]),'qdrupal/applications/'.$app->shortname.'/drafts/'.$args[0].'/'.$args[1])
    ));

    $drafts = QDRUPAL_APPLICATION_PATH . DS . basename(__FORM_DRAFTS__) . DS;
    $page = $drafts . $args[0] . '_' . $args[1] . '.php';

    if(!file_exists($page)) {
      drupal_not_found($page);
      return $page . print_r($args);
    }

    require_once($page);
  }
  
  _qdrupal_restore_drupal_error_handler();
  return ob_get_clean();
}

